kable() %>%
kable_styling()
song_genres <- dataset_clean %>%
mutate(
Id = row.names(dataset_clean),
artist_genres = replace_na(artist_genres, "No genre")
) %>%
select(Id, artist_genres) %>%
left_join(song_comp %>% select(Id, Clust), by = "Id") %>%
mutate(artist_genres = str_split(artist_genres, ",")) %>%
unnest(artist_genres) %>%
mutate(artist_genres = str_trim(artist_genres))
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
Top_songs <- top_genres_by_cluster %>%
group_by(Clust) %>%
slice_max(order_by = cluster_n, n = 5) %>%
ungroup() %>%
ggplot(aes(x = reorder(artist_genres, cluster_n), y = cluster_n, fill = Clust)) +
geom_bar(stat = "identity") +
facet_wrap(~ Clust, scales = "free_y") +
coord_flip() +
labs(
title = "Top Genres by Cluster",
x = "Genre",
y = "Count"
) +
theme_minimal()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
set.seed(46)
song_km <- kmeans(clustering_data, centers=9)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_genres <- dataset_clean %>%
mutate(
Id = row.names(dataset_clean),
artist_genres = replace_na(artist_genres, "No genre")
) %>%
select(Id, artist_genres) %>%
left_join(song_comp %>% select(Id, Clust), by = "Id") %>%
mutate(artist_genres = str_split(artist_genres, ",")) %>%
unnest(artist_genres) %>%
mutate(artist_genres = str_trim(artist_genres))
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
Top_songs <- top_genres_by_cluster %>%
group_by(Clust) %>%
slice_max(order_by = cluster_n, n = 5) %>%
ungroup() %>%
ggplot(aes(x = reorder(artist_genres, cluster_n), y = cluster_n, fill = Clust)) +
geom_bar(stat = "identity") +
facet_wrap(~ Clust, scales = "free_y") +
coord_flip() +
labs(
title = "Top Genres by Cluster",
x = "Genre",
y = "Count"
) +
theme_minimal()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
set.seed(47)
song_km <- kmeans(clustering_data, centers=9)
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_genres <- dataset_clean %>%
mutate(
Id = row.names(dataset_clean),
artist_genres = replace_na(artist_genres, "No genre")
) %>%
select(Id, artist_genres) %>%
left_join(song_comp %>% select(Id, Clust), by = "Id") %>%
mutate(artist_genres = str_split(artist_genres, ",")) %>%
unnest(artist_genres) %>%
mutate(artist_genres = str_trim(artist_genres))
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
Top_songs <- top_genres_by_cluster %>%
group_by(Clust) %>%
slice_max(order_by = cluster_n, n = 5) %>%
ungroup() %>%
ggplot(aes(x = reorder(artist_genres, cluster_n), y = cluster_n, fill = Clust)) +
geom_bar(stat = "identity") +
facet_wrap(~ Clust, scales = "free_y") +
coord_flip() +
labs(
title = "Top Genres by Cluster",
x = "Genre",
y = "Count"
) +
theme_minimal()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
set.seed(48)
song_km <- kmeans(clustering_data, centers=9)
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
set.seed(49)
song_km <- kmeans(clustering_data, centers=9)
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_genres <- dataset_clean %>%
mutate(
Id = row.names(dataset_clean),
artist_genres = replace_na(artist_genres, "No genre")
) %>%
select(Id, artist_genres) %>%
left_join(song_comp %>% select(Id, Clust), by = "Id") %>%
mutate(artist_genres = str_split(artist_genres, ",")) %>%
unnest(artist_genres) %>%
mutate(artist_genres = str_trim(artist_genres))
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
Top_songs <- top_genres_by_cluster %>%
group_by(Clust) %>%
slice_max(order_by = cluster_n, n = 5) %>%
ungroup() %>%
ggplot(aes(x = reorder(artist_genres, cluster_n), y = cluster_n, fill = Clust)) +
geom_bar(stat = "identity") +
facet_wrap(~ Clust, scales = "free_y") +
coord_flip() +
labs(
title = "Top Genres by Cluster",
x = "Genre",
y = "Count"
) +
theme_minimal()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
set.seed(50)
song_km <- kmeans(clustering_data, centers=9)
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
set.seed(52)
song_km <- kmeans(clustering_data, centers=9)
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_genres <- dataset_clean %>%
mutate(
Id = row.names(dataset_clean),
artist_genres = replace_na(artist_genres, "No genre")
) %>%
select(Id, artist_genres) %>%
left_join(song_comp %>% select(Id, Clust), by = "Id") %>%
mutate(artist_genres = str_split(artist_genres, ",")) %>%
unnest(artist_genres) %>%
mutate(artist_genres = str_trim(artist_genres))
# Count total genre appearances
genre_totals <- song_genres %>%
count(artist_genres, name = "total_n")
# Count genre appearances in clusters
genre_counts_by_cluster <- song_genres %>%
count(Clust, artist_genres, name = "cluster_n")
# Fix cluster sizes (based on unique songs)
cluster_tot <- song_genres %>%
distinct(Id, Clust) %>%
count(Clust, name = "cluster_size")
# Combine and compute proportions
top_genres_by_cluster <- genre_counts_by_cluster %>%
left_join(genre_totals, by = "artist_genres") %>%
left_join(cluster_tot, by = "Clust") %>%
mutate(
rel_in_cluster = cluster_n / total_n,       # genre-centric
cluster_percent = cluster_n / cluster_size  # cluster-centric
) %>%
drop_na()
Top_songs <- top_genres_by_cluster %>%
group_by(Clust) %>%
slice_max(order_by = cluster_n, n = 5) %>%
ungroup() %>%
ggplot(aes(x = reorder(artist_genres, cluster_n), y = cluster_n, fill = Clust)) +
geom_bar(stat = "identity") +
facet_wrap(~ Clust, scales = "free_y") +
coord_flip() +
labs(
title = "Top Genres by Cluster",
x = "Genre",
y = "Count"
) +
theme_minimal()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
song_comp <- data.frame(clustering_data,
Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
ggplot(song_pop, aes(x = Clust, y = popularity, fill = Clust)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Popularity Distribution by Cluster",
x = "Cluster",
y = "Popularity"
) +
theme_minimal() +
theme(legend.position = "none")
gc()
gc()
library(tidyverse)
library(rayshader)
library(terra)
library(bfsMaps)
library(sf)
library(grid)
library(png)
library(raster)
getwd()
setwd("../Desktop/MeteoThesis/")
raster <- rast("data/raw/altitude/DHM200.asc")
crs(raster) <- "EPSG:21781"  # LV03
# Reproject to LV95
raster_95 <- project(raster, "EPSG:2056")
# Load Valais canton border
options(bfsMaps.base = "data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
valais_grenz <- GetMap("kant.map")
valais_polygon <- valais_grenz %>% filter(name == "Valais")
# Project polygon to raster CRS and crop/mask
valais_proj <- st_transform(valais_polygon$geometry, crs(raster_95))
valais_vect <- vect(valais_proj)
valais_map <- raster_95 %>%
crop(valais_vect) %>%
mask(valais_vect)
writeRaster(valais_map, "data/clean/valais_elevation.asc")
raster <- rast("data/raw/altitude/DHM200.asc")
crs(raster) <- "EPSG:21781"  # LV03
# Reproject to LV95
raster_95 <- project(raster, "EPSG:2056")
# Load Valais canton border
options(bfsMaps.base = "data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
valais_grenz <- GetMap("kant.map")
valais_polygon <- valais_grenz %>% filter(name == "Valais")
# Project polygon to raster CRS and crop/mask
valais_proj <- st_transform(valais_polygon$geometry, crs(raster_95))
valais_vect <- vect(valais_proj)
valais_map <- raster_95 %>%
crop(valais_vect) %>%
mask(valais_vect)
writeRaster(valais_map, "data/clean/valais_elevation.asc", format = "ascii", overwrite = TRUE)
raster <- rast("data/raw/altitude/DHM200.asc")
crs(raster) <- "EPSG:21781"  # LV03
# Reproject to LV95
raster_95 <- project(raster, "EPSG:2056")
# Load Valais canton border
options(bfsMaps.base = "data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
valais_grenz <- GetMap("kant.map")
valais_polygon <- valais_grenz %>% filter(name == "Valais")
# Project polygon to raster CRS and crop/mask
valais_proj <- st_transform(valais_polygon$geometry, crs(raster_95))
valais_vect <- vect(valais_proj)
valais_map <- raster_95 %>%
crop(valais_vect) %>%
mask(valais_vect)
writeRaster(valais_map, "data/clean/valais_elevation.asc", overwrite = TRUE)
check_raster <- rast("data/clean/valais_elevation.asc")
print(check_raster)
