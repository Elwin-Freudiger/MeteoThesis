Clust=factor(song_km$cluster),
Id=row.names(dataset_clean))
song_df <- melt(song_comp, id=c("Id", "Clust"))
ggplot(song_df, aes(y=value, group=Clust, fill=Clust)) +
geom_boxplot() +
facet_wrap(~variable)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
song_comp <- data.frame(
clustering_data,
Clust = factor(song_km$cluster),
Id = row.names(dataset_clean),
release_year = dataset_clean$release_year
) %>% filter(release_year > 0)
song_comp %>%
group_by(Clust) %>%
summarise(
count = n(),
mean_year = mean(release_year, na.rm = TRUE),
median_year = median(release_year, na.rm = TRUE)
) %>%
rename(`Cluster`= Clust, `Mean Year` = mean_year, `Median Year`= median_year) %>%
kable() %>%
kable_styling()
Top_songs
top_genres_by_cluster %>%
filter(total_n >= 500) %>%
group_by(Clust) %>%
slice_max(order_by = rel_in_cluster, n = 2, with_ties = FALSE) %>%
ungroup() %>%
select(c(Clust, artist_genres, rel_in_cluster, total_n)) %>%
kable() %>%
kable_styling()
ggplot(song_pop, aes(x = Clust, y = popularity, fill = Clust)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Popularity Distribution by Cluster",
x = "Cluster",
y = "Popularity"
) +
theme_minimal() +
theme(legend.position = "none")
install.packages(rayshader)
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
library(devtools)
install.packages(devtool)
install.packages(devtools)
install.packages("devtools")
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
install.packages("rayshader")
library(tidyverse)
library(rayshader)
getwd()
setwd("..")
setwd("Desktop/MeteoThesis/")
install.packages("raster")
install.packages("Rtools")
library(raster)
raster = raster("data/raw/altitude/DHM200.asc")
plot(raster)
elmat = raster_to_matrix(raster)
elmat %>% plot_map
elmat %>% plot_map()
citation("rayshader", style= "latex")
citation("rayshader", style= "text")
citation("rayshader")
install.packages("bfsMaps")
libary(bfsMaps)
library(bfsMaps)
options(bfsMaps.base ="\data\swiss_boundaries\mb-x-00.07.01.01-25\2025_GEOM_TK")
options(bfsMaps.base ="data\swiss_boundaries\mb-x-00.07.01.01-25\2025_GEOM_TK")
options(bfsMaps.base ="data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
PlotKant()
library(terra)
plotCH()
national_grenz <- GetMap(ch.map)
library(bfsMaps)
options(bfsMaps.base ="data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
national_grenz <- GetMap(ch.map)
national_grenz <- GetMap("ch.map")
View(national_grenz)
trimed_map <- raster %>% mask(national_polygon) %>% crop(national_polygon)
library(sf)
library(raster)
raster <- raster("data/raw/altitude/DHM200.asc")
trimed_map <- raster %>% mask(national_polygon) %>% crop(national_polygon)
library(terra)
plot(national_polygon)
national_polygon <- national_grenz$geometry
trimed_map <- raster %>% mask(national_polygon) %>% crop(national_polygon)
plot(national_polygon)
plot(raster)
polygon_bf <- buffer(vect(national_polygon), width= -100000)
plot(polygon_bf, add= T)
library(tidyverse)
library(rayshader)
library(terra)
library(bfsMaps)
library(sf)
# Load raster
raster <- rast("data/raw/altitude/DHM200.asc")
options(bfsMaps.base ="data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
national_grenz <- GetMap("ch.map")
national_polygon <- national_grenz$geometry
# Convert sf to terra vector
national_vect <- vect(national_polygon)
# Crop and mask raster
trimmed_map <- raster %>% crop(national_vect) %>% mask(national_vect)
crs(raster, describe = TRUE)
crs(raster, describe = TRUE)
st_transform(national_polygon, "EPSG:2056")  # or 21781, depending
options(bfsMaps.base ="data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
national_grenz <- GetMap("ch.map")
national_polygon <- national_grenz$geometry
# Convert sf to terra vector
national_vect <- vect(national_polygon)
# Crop and mask raster
trimmed_map <- raster %>% crop(national_vect) %>% mask(national_vect)
national_union <- st_union(national_polygon)
national_proj <- st_transform(national_union, crs(raster))
national_union <- st_union(national_polygon)
national_vect <- vect(national_proj)
library(maptools)
install.packages("maptools")
library(maptools)
library(maptools)
cantons <- GetMap("kant.map")
View(cantons)
View(national_polygon)
national_polygon <- national_grenz$geometry[1]
View(national_vect)
plot(national_vect)
plot(national_vect, add=T)
plot(national_vect, add=T)
plot(raster)
plot(national_vect, add=T)
national_bf <- buffer(national_vect, width= -100000)
plot(national_bf, add=T)
View(national_bf)
national_bf <- buffer(national_vect, width= -100)
plot(national_bf, add=T)
View(national_bf)
national_grenz <- GetMap("ch.map")
raster <- rast("data/raw/altitude/DHM200.asc")
# Set bfsMaps base path and load national boundary
options(bfsMaps.base ="data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK")
national_grenz <- GetMap("ch.map")
national_polygon <- national_grenz$geometry
crs(raster)
crs(national_polygon)
st_crs(national_polygon)
# Load raster
raster <- rast("data/raw/altitude/DHM200.xyz")
crs(raster)
crs(raster) <- "EPSG:2056"
crs(raster) <- "EPSG:21781"
raster_95 <-  project(raster, "EPSG:2056")
crs(raster)
national_proj <- st_transform(national_polygon, crs(raster_lv95))
national_proj <- st_transform(national_polygon, crs(raster_95))
# Convert to terra vector
national_vect <- vect(national_proj)
# Crop and mask
trimmed_map <- raster_lv95 %>%
crop(national_vect) %>%
mask(national_vect)
national_proj <- st_transform(national_polygon, crs(raster_95))
# Convert to terra vector
national_vect <- vect(national_proj)
# Crop and mask
trimmed_map <- raster_95 %>%
crop(national_vect) %>%
mask(national_vect)
plot(trimmed_map)
elmat <- matrix(
values(trimmed_map),
nrow = nrow(trimmed_map),
ncol = ncol(trimmed_map),
byrow = TRUE
)
elmat <- t(elmat)[, nrow(elmat):1]
# Rayshader plot
elmat %>%
height_shade() %>%
plot_3d(elmat, zscale = 20, fov = 0, theta = 135, phi = 45, windowsize = c(1000,800))
render_snapshot()
# Rayshader plot
elmat %>%
height_shade() %>%
plot_map()
elmat <- matrix(
values(trimmed_map),
nrow = nrow(trimmed_map),
ncol = ncol(trimmed_map),
byrow = TRUE
)
elmat %>%
height_shade() %>%
plot_map()
elmat_rotated <- t(elmat)[, nrow(elmat):1]
elmat_rotated <- elmat_rotated[, ncol(elmat_rotated):1]
# Rayshader plot
elmat_rotated %>%
height_shade() %>%
plot_map()
test <- getMap("polg.map")
test <- GetMap("polg.map")
View(test)
test <- GetMap("bezk.map")
View(test)
test <- GetMap("greg.map")
View(test)
elmat_rotated %>%
height_shade() %>%
plot_3d(elmat, zscale = 20, fov = 0, theta = 135, phi = 45, windowsize = c(1000,800))
elmat_rotated %>%
height_shade() %>%
plot_3d(elmat, zscale = 20, fov = 0, theta = 135, phi = 45, windowsize = c(1000,800))
render_snapshot()
elmat_rotated %>% sphere_shade() %>%
add_water(detect_water(elmat_rotated)) %>%
add_shadow(ray_shade(elmat_rotated), 0.5) %>%
add_shadow(ambient_shade(elmat_rotated), 0) %>%
plot_map()
elmat_rotated %>%
height_shade() %>%
plot_3d(elmat, zscale = 15, fov = 0, theta = 0, phi = 45, windowsize = c(1000,800))
render_snapshot()
elmat_rotated %>%
sphere_shade() %>%
add_shadow(ray_shade(elmat), 0.5) %>%
plot_map()
elmat_rotated %>%
plot_map()
elmat_rotated %>%
sphere_shade(texture = "desert") %>%
plot_map()
elmat_rotated %>%
sphere_shade(texture = "imhof1") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "imhof3") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "imhof4") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "bw") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "unicorn") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "imhof3") %>%
plot_map()
# Rayshader plot
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
plot_map()
water_sf <- st_read("data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK/00_TOPO/K4_seenyyyymmdd")
water_proj <- st_transform(water_sf, crs(trimmed_map))
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
plot_map()
render_polygons(water_proj,
extent = extent(trimmed_map),
heightmap = elmat_rotated,
zscale = 20,
color = "skyblue",   # Or any water color
linewidth = 0)
elmat_rotated %>%
sphere_shade(texture = "imhof2")
render_polygons(water_proj,
extent = extent(trimmed_map),
heightmap = elmat_rotated,
zscale = 20,
color = "skyblue",   # Or any water color
linewidth = 0)
blank_raster <- trimmed_map
values(blank_raster) <- NA  # Set all to NA
# Rasterize water shapes onto the blank raster
water_raster <- rasterize(vect(water_proj), blank_raster, field=1, background=NA)
# Convert water_raster to matrix
water_mat <- matrix(values(water_raster),
nrow = nrow(water_raster),
ncol = ncol(water_raster),
byrow = TRUE)
# Rotate to match rayshader's orientation
water_mat <- t(water_mat)[, nrow(water_mat):1]
water_mat <- water_mat[, ncol(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "dodgerblue") %>%
plot_map()
blank_raster <- trimmed_map
values(blank_raster) <- NA  # Set all to NA
# Rasterize water shapes onto the blank raster
water_raster <- rasterize(vect(water_proj), blank_raster, field=1, background=NA)
# Convert water_raster to matrix
water_mat <- matrix(values(water_raster),
nrow = nrow(water_raster),
ncol = ncol(water_raster),
byrow = TRUE)
# Rotate to match rayshader's orientation
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_sf <- st_read("data/swiss_boundaries/mb-x-00.07.01.01-25/2025_GEOM_TK/00_TOPO/K4_seenyyyymmdd")
water_proj <- st_transform(water_sf, crs(trimmed_map))
blank_raster <- trimmed_map
values(blank_raster) <- NA  # Set all to NA
# Rasterize water shapes onto the blank raster
water_raster <- rasterize(vect(water_proj), blank_raster, field=1, background=NA)
# Convert water_raster to matrix
water_mat <- matrix(values(water_raster),
nrow = nrow(water_raster),
ncol = ncol(water_raster),
byrow = TRUE)
# Rotate to match rayshader's orientation
water_mat <- water_mat[, ncol(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat <- t(water_mat)[, nrow(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat <- matrix(values(water_raster),
nrow = nrow(water_raster),
ncol = ncol(water_raster),
byrow = TRUE)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat <- t(water_mat)[, nrow(water_mat):1]
water_mat <- water_mat[, ncol(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat <- t(water_mat)[, nrow(water_mat):1]
water_mat <- water_mat[, ncol(water_mat):1]
flipped_matrix <- water_mat[rev(seq_along(rownames(water_mat))), ]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(flipped_matrix)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
View(water_mat)
water_mat <- t(water_mat)[, nrow(water_mat):1]
water_mat <- water_mat[, ncol(water_mat):1]
water_mat_aligned <- water_mat_rotated[, ncol(water_mat_rotated):1]
water_mat <- matrix(values(water_raster),
nrow = nrow(water_raster),
ncol = ncol(water_raster),
byrow = TRUE)
# Rotate to match rayshader's orientation
water_mat_rotated <- t(water_mat)[, nrow(water_mat):1]
water_mat_rotated <- water_mat_rotated[, ncol(water_mat_rotated):1]  # rotate 90° clockwise
water_mat_aligned <- water_mat_rotated[, ncol(water_mat_rotated):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_aligned)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)[, nrow(water_mat):1]
water_mat_rotated <- water_mat_rotated[, ncol(water_mat_rotated):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)
water_mat_rotated <- water_mat_rotated[, ncol(water_mat_rotated):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
# Rotate to match rayshader's orientation
water_mat_rotated <- t(water_mat)
water_mat_rotated <- water_mat_rotated[, row(water_mat_rotated):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)
water_mat_rotated <- water_mat_rotated[, nrow(water_mat_rotated):1]
water_mat_rotated <- t(water_mat)
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)[, nrow(water_mat):1]
water_mat_rotated <- water_mat_rotated[, ncol(water_mat_rotated):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)[, col(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)[, col(water_mat):1]
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
rotate_90_clockwise <- function(mat) {
t(mat)[, ncol(mat):1]
}
# Convert to logical matrix (TRUE = water)
water_mat_logical <- !is.na(rotate_90_clockwise(water_mat))
rotate_90_clockwise <- function(mat) {
tmat <- t(mat)                   # Step 1: transpose
tmat[, ncol(tmat):1]            # Step 2: flip columns (Y-axis mirror)
}
# Convert to logical matrix (TRUE = water)
water_mat_rotated <- rotate_90_clockwise(water_mat)
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
rotate_90_clockwise <- function(mat) {
tmat <- t(mat)                   # Step 1: transpose
tmat[, ncol(tmat):1]            # Step 2: flip columns (Y-axis mirror)
}
# Convert to logical matrix (TRUE = water)
water_mat_rotated <- rotate_90_clockwise(water_mat)
water_mat_rotated <- water_mat_rotated[nrow(water_mat_rotated):1, ncol(water_mat_rotated):1]
water_mat_logical <- !is.na(water_mat_rotated)
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_map()
water_mat_rotated <- t(water_mat)
water_mat_rotated <- water_mat_rotated[, nrow(water_mat_rotated):1]
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
add_shadow(ray_shade(elmat, zscale = 3), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 1, phi = 0, windowsize = c(1000, 800))
elmat_rotated %>%
sphere_shade(texture = "imhof2") %>%
add_water(water_mat_logical, color = "lightblue") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 45, zoom = 1, phi = 45, windowsize = c(1000, 800))
citation("rayshader")
citation("bfsMaps")
